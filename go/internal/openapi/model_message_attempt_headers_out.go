/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MessageAttemptHeadersOut struct for MessageAttemptHeadersOut
type MessageAttemptHeadersOut struct {
	Sensitive []string `json:"sensitive"`
	SentHeaders map[string]string `json:"sentHeaders"`
}

// NewMessageAttemptHeadersOut instantiates a new MessageAttemptHeadersOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageAttemptHeadersOut(sensitive []string, sentHeaders map[string]string) *MessageAttemptHeadersOut {
	this := MessageAttemptHeadersOut{}
	this.Sensitive = sensitive
	this.SentHeaders = sentHeaders
	return &this
}

// NewMessageAttemptHeadersOutWithDefaults instantiates a new MessageAttemptHeadersOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageAttemptHeadersOutWithDefaults() *MessageAttemptHeadersOut {
	this := MessageAttemptHeadersOut{}
	return &this
}

// GetSensitive returns the Sensitive field value
func (o *MessageAttemptHeadersOut) GetSensitive() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Sensitive
}

// GetSensitiveOk returns a tuple with the Sensitive field value
// and a boolean to check if the value has been set.
func (o *MessageAttemptHeadersOut) GetSensitiveOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Sensitive, true
}

// SetSensitive sets field value
func (o *MessageAttemptHeadersOut) SetSensitive(v []string) {
	o.Sensitive = v
}

// GetSentHeaders returns the SentHeaders field value
func (o *MessageAttemptHeadersOut) GetSentHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.SentHeaders
}

// GetSentHeadersOk returns a tuple with the SentHeaders field value
// and a boolean to check if the value has been set.
func (o *MessageAttemptHeadersOut) GetSentHeadersOk() (*map[string]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SentHeaders, true
}

// SetSentHeaders sets field value
func (o *MessageAttemptHeadersOut) SetSentHeaders(v map[string]string) {
	o.SentHeaders = v
}

func (o MessageAttemptHeadersOut) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sensitive"] = o.Sensitive
	}
	if true {
		toSerialize["sentHeaders"] = o.SentHeaders
	}
	return json.Marshal(toSerialize)
}

type NullableMessageAttemptHeadersOut struct {
	value *MessageAttemptHeadersOut
	isSet bool
}

func (v NullableMessageAttemptHeadersOut) Get() *MessageAttemptHeadersOut {
	return v.value
}

func (v *NullableMessageAttemptHeadersOut) Set(val *MessageAttemptHeadersOut) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageAttemptHeadersOut) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageAttemptHeadersOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageAttemptHeadersOut(val *MessageAttemptHeadersOut) *NullableMessageAttemptHeadersOut {
	return &NullableMessageAttemptHeadersOut{value: val, isSet: true}
}

func (v NullableMessageAttemptHeadersOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageAttemptHeadersOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


